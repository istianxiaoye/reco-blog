import{_ as n,o as s,c as a,e}from"./app-jmEemqZF.js";const t={},p=e(`<h3 id="computed-在-vue-中常用-是一种计算属性-里面的值是响应式的-但你知道-getcomputedstyle-这个-css-属性吗-computed-style-没错-样式也能做到响应式。" tabindex="-1"><a class="header-anchor" href="#computed-在-vue-中常用-是一种计算属性-里面的值是响应式的-但你知道-getcomputedstyle-这个-css-属性吗-computed-style-没错-样式也能做到响应式。" aria-hidden="true">#</a> Computed 在 Vue 中常用，是一种计算属性，里面的值是响应式的，但你知道 getComputedStyle 这个 CSS 属性吗？Computed + Style ，没错，样式也能做到响应式。</h3><h2 id="以下getcomputedstyle-的-2-个巧用" tabindex="-1"><a class="header-anchor" href="#以下getcomputedstyle-的-2-个巧用" aria-hidden="true">#</a> 以下getComputedStyle 的 2 个巧用</h2><h3 id="_1-pc-or-mobile" tabindex="-1"><a class="header-anchor" href="#_1-pc-or-mobile" aria-hidden="true">#</a> 1.PC or Mobile</h3><p>我们通常用响应式布局判断当前设备是 PC 端还是 Mobile，然后采用不同的样式。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 480px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/* 小屏幕宽度下的响应式布局 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想在 JS 也拿到这个信息（当前是 PC 还是 Mobile），可以获得 screen.width，但这个 width 信息是不准确的，手机也存在横屏的时候，会产生临界宽度的问题。</p><p>这个时候我们可以利用 getComputedStyle 拿 CSS 的伪元素信息，再搭配 CSS 原生支持的 any-hover 属性，就能在 CSS 和 JS 两处地方，准确地知道：当前是 PC 还是 Mobile。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">any-hover</span><span class="token punctuation">:</span> none<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token selector">body::before</span> <span class="token punctuation">{</span>
        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;hoverNone&#39;</span><span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

var strContent = <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document.body<span class="token punctuation">,</span> <span class="token string">&#39;::before&#39;</span><span class="token punctuation">)</span>.content<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// strContent结果是&#39;none&#39;则表示支持 hover，是 PC 端， // strContent结果是&#39;&quot;hoverNone&quot;&#39;则表示不支持 hover 经过，需要换成 click 事件，是 Mobile 端 这样 JS 就拥有了 CSS any-hover 的能力~</p><h3 id="_2-黑暗模式" tabindex="-1"><a class="header-anchor" href="#_2-黑暗模式" aria-hidden="true">#</a> 2.黑暗模式</h3><p>我们经常用到黑暗模式：自从有了 CSS 自定义属性，黑暗模式写起来也变得方便：</p><p>JS 如何共享自定义属性 --mode 的内容？</p><p>如何用 JS 判断当前是处于黑暗模式，还是浅色主题？</p><p>getComputedStyle 可以做到~~</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
    <span class="token property">--mode</span><span class="token punctuation">:</span> <span class="token string">&#39;unknown&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/* 黑暗模式 */</span>
    <span class="token selector">:root</span> <span class="token punctuation">{</span>
         <span class="token property">--mode</span><span class="token punctuation">:</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">;</span>
         <span class="token property">--colorLink</span><span class="token punctuation">:</span> #bfdbff<span class="token punctuation">;</span>
         <span class="token property">--colorMark</span><span class="token punctuation">:</span> #cc0000<span class="token punctuation">;</span>
         <span class="token property">--colorText</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>
         <span class="token property">--colorLight</span><span class="token punctuation">:</span> #777777<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> light<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token comment">/* 浅色主题 */</span>
    <span class="token selector">:root</span> <span class="token punctuation">{</span>
         <span class="token property">--mode</span><span class="token punctuation">:</span> <span class="token string">&#39;light&#39;</span><span class="token punctuation">;</span>
         <span class="token property">--colorLink</span><span class="token punctuation">:</span> #34538b<span class="token punctuation">;</span>
         <span class="token property">--colorMark</span><span class="token punctuation">:</span> #cc0000<span class="token punctuation">;</span>
         <span class="token property">--colorText</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span>
         <span class="token property">--colorLight</span><span class="token punctuation">:</span> #cccccc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一行代码解决：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> mode <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">&#39;--mode&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// mode结果是&#39;&quot;dark&quot;&#39;则表示黑夜主题，深色模式，黑暗风格，护眼模式。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>兼容性不错</p><h3 id="_3-最后总结一下" tabindex="-1"><a class="header-anchor" href="#_3-最后总结一下" aria-hidden="true">#</a> 3.最后总结一下</h3><p>getComputedStyle是一个JavaScript函数，用于获取当前元素所有最终使用的CSS属性值。这个函数返回的是一个CSS样式声明对象，只读。</p><p>与通过element.style获取的样式声明对象相比，getComputedStyle有以下几个区别：</p><ol><li>只读与可写：getComputedStyle方法是只读的，只能获取样式，不能设置；而element.style能读能写，能屈能伸。</li><li>获取的对象范围：getComputedStyle方法获取的是最终应用在元素上的所有CSS属性对象（即使没有CSS代码，也会把默认的祖宗八代都显示出来）；而element.style只能获取元素style属性中的CSS样式。</li></ol><p>使用getComputedStyle()时需要两个参数：第一个是待获取样式的元素，第二个是可以传递一个伪元素，一般都传null。该方法会返回一个对象，对象中封装了当前元素对应的样式。可以通过getComputedStyle(对象，null).样式名的形式来读取样式。如果获取的样式没有设置，则会获取到真实的值，而不是默认值。</p><p>getComputedStyle的适用场景包括但不限于：</p><ol><li><strong>响应式布局</strong>：在响应式设计中，我们可能需要判断当前设备是PC端还是Mobile端，然后采用不同的样式。getComputedStyle可以用于获取当前元素的计算样式，从而在JavaScript中判断当前是PC还是Mobile。</li><li><strong>动态样式调整</strong>：如果你需要根据某些条件动态调整元素的样式，getComputedStyle可以用来获取当前元素的实际样式，然后基于这些样式进行动态调整。</li><li><strong>元素尺寸和位置计算</strong>：当需要精确计算元素的大小和位置时，getComputedStyle可以帮助你获取元素的最终计算样式，包括宽度、高度、边距等。</li><li><strong>兼容性检查</strong>：在处理CSS属性和值的兼容性问题时，getComputedStyle可以帮助你获取浏览器实际渲染的样式，从而进行兼容性检查。</li><li><strong>调试和开发工具</strong>：在开发过程中，可以使用getComputedStyle来检查元素的最终样式，帮助你定位和解决样式问题。</li></ol><p>以上是一些常见的适用场景，实际上，任何需要获取元素最终计算样式的场景都可以使用getComputedStyle。</p>`,26),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","CSS shuxing--getComputedStyle.html.vue"]]);export{r as default};
