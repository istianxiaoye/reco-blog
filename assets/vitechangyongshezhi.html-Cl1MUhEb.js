import{_ as t,r as o,o as i,c as l,a as n,b as s,d as e,e as p}from"./app-jmEemqZF.js";const c={},r=p(`<h2 id="_1-css-preprocessoroptions" tabindex="-1"><a class="header-anchor" href="#_1-css-preprocessoroptions" aria-hidden="true">#</a> 1.css.preprocessorOptions</h2><p>传递给 CSS 预处理器的配置选项，这些配置会传递到预处理器的执行参数中去。例如，在 scss 中定义一个全局变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span> <span class="token comment">// 使用 defineConfig 工具函数获取类型提示：</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">$injectedColor: orange;</span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// 全局变量</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以定义一个全局变量文件，然后再引入这个文件：</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token comment">// src/assets/styles/variables.scss</span>
<span class="token property"><span class="token variable">$injectedColor</span></span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
<span class="token property"><span class="token variable">$injectedFontSize</span></span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">additionalData</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@import &#39;/src/assets/styles/variables.scss&#39;;</span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// 引入全局变量文件</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在 .scss 文件或 .vue 文件中就可以使用这些变量了。</p><p><strong>适用场景</strong></p><ol><li><p><strong>自定义配置：</strong> 如果你在使用特定的 CSS 预处理器（如 Sass、Less 或 Stylus），css.preprocessorOptions 可以让你自定义预处理器的配置。例如，你可以调整 Sass 的输出格式，或者在 Less 中启用颜色功能。</p></li><li><p><strong>兼容性：</strong> 有时候，你可能需要使用一些特定的 CSS 特性或语法，而这些特性可能不被所有浏览器支持。通过使用 CSS 预处理器，你可以将这些特性转换为更兼容的语法，从而提高你的 CSS 在各种浏览器中的兼容性。</p></li><li><p><strong>可维护性：</strong> 预处理器通常提供一些功能，可以帮助你组织和管理 CSS 代码。例如，你可以使用预处理器的变量和混入功能来减少重复代码，提高代码的可读性和可维护性。</p></li><li><p><strong>优化性能：</strong> 预处理器还提供一些优化性能的功能。例如，你可以使用 Sass 的树摇（Tree-shaking）功能来消除未使用的 CSS 规则，从而减少最终 CSS 文件的大小。</p></li></ol><h2 id="_2-css-postcss" tabindex="-1"><a class="header-anchor" href="#_2-css-postcss" aria-hidden="true">#</a> 2. css.postcss</h2><p>PostCSS 也是用来处理 CSS 的，只不过它更像是一个工具箱，可以添加各种插件来处理 CSS 。像浏览器样式兼容问题、浏览器适配等，都可以通过 PostCSS 来解决。</p><p>Vite 对 PostCSS 有良好的支持，我们只需要安装相应的插件就可以了。如移动端使用 postcss-px-to-viewport 对不同设备进行布局适配：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install postcss<span class="token operator">-</span>px<span class="token operator">-</span>to<span class="token operator">-</span>viewport <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> postcssPxToViewport <span class="token keyword">from</span> <span class="token string">&#39;postcss-px-to-viewport&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token comment">// viewport 布局适配</span>
        <span class="token function">postcssPxToViewport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">viewportWidth</span><span class="token operator">:</span> <span class="token number">375</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们书写的 px 单位就会转为 vw 或 vh ，很轻松地解决了适配问题。</p><h2 id="_3-resolve-alias" tabindex="-1"><a class="header-anchor" href="#_3-resolve-alias" aria-hidden="true">#</a> 3. resolve.alias</h2><p>定义路径别名也是我们常用的一个功能，我们通常会给 src 定义一个路径别名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 路径别名</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用插件，来自动给 src 和 src 下所有的文件夹定义路径别名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ViteAliases <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./node_modules/vite-aliases&#39;</span> <span class="token comment">// 通过名称引入会报错，可能是插件问题</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">ViteAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的路径别名如下：</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>src <span class="token punctuation">-&gt;</span> <span class="token operator">@</span>
  assets <span class="token punctuation">-&gt;</span> <span class="token operator">@</span>assets
  components <span class="token punctuation">-&gt;</span> <span class="token operator">@</span>components
  router <span class="token punctuation">-&gt;</span> <span class="token operator">@</span>router
  stores <span class="token punctuation">-&gt;</span> <span class="token operator">@</span>stores
  views <span class="token punctuation">-&gt;</span> <span class="token operator">@</span>views
  <span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-resolve-extensions" tabindex="-1"><a class="header-anchor" href="#_4-resolve-extensions" aria-hidden="true">#</a> 4. resolve.extensions</h2><p>导入时想要省略的扩展名列表。默认值为 [&#39;.mjs&#39;, &#39;.js&#39;, &#39;.ts&#39;, &#39;.jsx&#39;, &#39;.tsx&#39;, &#39;.json&#39;] 。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.json&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 导入时想要省略的扩展名列表</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不建议忽略自定义导入类型的扩展名（例如：.vue），因为它会影响 IDE 和类型支持。</p><h2 id="_5-optimizedeps-force" tabindex="-1"><a class="header-anchor" href="#_5-optimizedeps-force" aria-hidden="true">#</a> 5. optimizeDeps.force</h2><p>是否开启强制依赖预构建。node_modules 中的依赖模块构建过一次就会缓存在 node_modules/.vite/deps 文件夹下，下一次会直接使用缓存的文件。而有时候我们想要修改依赖模块的代码，做一些测试或者打个补丁，这时候就要用到强制依赖预构建。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">optimizeDeps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">force</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 强制进行依赖预构建</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了这个方法，我们还可以通过删除 .vite 文件夹或运行 npx vite --force 来强制进行依赖预构建。</p><p><strong>解决的问题：</strong></p><p>在 Vite 中，optimizeDeps.force 配置项用于强制优化依赖关系。它主要用于解决一些依赖关系无法正确解析和优化的问题，例如某些依赖项在编译时可能没有正确地解析，导致应用程序在运行时出现错误。</p><p><strong>适用场景：</strong></p><ol><li><p><strong>依赖关系解析问题：</strong> 有些依赖项可能在编译时无法正确解析，导致应用程序在运行时出现错误。使用 optimizeDeps.force 可以强制优化这些依赖项，确保它们在编译时被正确解析。</p><blockquote><p>常会出现以下几种情况：</p></blockquote><ol><li><p>依赖项无法找到： 在编译时，编译器可能无法找到某些依赖项，导致出现错误或警告。这可能是由于依赖项的路径不正确、名称拼写错误或其他原因导致的。使用 optimizeDeps.force 可以强制优化这些依赖项，确保它们在编译时被正确解析。</p></li><li><p>依赖项版本冲突： 在项目中，不同的依赖项可能存在版本冲突的情况。这可能导致一些依赖项无法正常加载或运行，出现错误或异常。使用 optimizeDeps.force 可以强制优化这些依赖项，确保它们在编译时被正确解析，并解决版本冲突问题。</p></li><li><p>动态加载的依赖项： 在一些应用程序中，依赖项可能是在运行时动态加载的，而不是在编译时静态解析的。在这种情况下，编译器可能无法正确地解析这些依赖项，导致出现错误或异常。使用 optimizeDeps.force 可以强制优化这些动态加载的依赖项，确保它们在运行时被正确解析。</p></li><li><p>浏览器兼容性问题： 某些依赖项可能存在浏览器兼容性问题，导致在某些浏览器中无法正常加载或运行。使用 optimizeDeps.force 可以强制优化这些依赖项，确保它们在编译时被正确解析，并解决浏览器兼容性问题。</p></li></ol></li><li><p><strong>性能优化：</strong> 对于一些不常变动的依赖项，使用 optimizeDeps.force 可以将其缓存起来，从而减少每次编译时的解析时间，提高编译速度和性能。</p></li><li><p><strong>开发环境与生产环境差异：</strong> 在开发环境中，可能希望对依赖项进行实时编译和解析，以便于调试和开发。而在生产环境中，更注重编译速度和性能。使用 optimizeDeps.force 可以根据不同的环境进行不同的优化策略。</p></li></ol><p>具体来说，optimizeDeps.force 配置项可以接受一个对象或一个函数作为参数。如果传递一个对象，该对象的属性可以是一个字符串数组，表示需要强制优化的依赖项的名称。如果传递一个函数，该函数接受两个参数：当前文件和当前依赖项的路径，并返回一个布尔值来指示是否需要优化该依赖项。</p><p>例如，下面的配置将强制优化名为 lodash 的依赖项：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">optimizeDeps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">force</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 强制进行依赖预构建</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总之，optimizeDeps.force 配置项可以解决一些依赖关系解析问题，提高编译速度和性能，以及根据不同环境进行不同的优化策略。</p><h2 id="_6-server-host" tabindex="-1"><a class="header-anchor" href="#_6-server-host" aria-hidden="true">#</a> 6. server.host</h2><p>指定服务器监听哪个 IP 地址。默认值为 localhost ，只会监听本地的 127.0.0.1 。当我们开发移动端项目时，需要在手机浏览器上访问当前项目。这时候可以将 host 设置为 true 或 0.0.0.0 ，这样服务器就会监听所有地址，包括局域网和公网地址。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 监听所有地址</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当手机和电脑处于同一个网络环境下，我们就可以通过下面那个地址进行访问了。</p><h2 id="_7-server-proxy" tabindex="-1"><a class="header-anchor" href="#_7-server-proxy" aria-hidden="true">#</a> 7. server.proxy</h2><p>反向代理也是我们经常会用到的一个功能，通常我们使用它来进行跨域：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 字符串简写写法</span>
      <span class="token string-property property">&#39;/foo&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:4567&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// 选项写法</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 正则表达式写法</span>
      <span class="token string-property property">&#39;^/fallback/.*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/fallback</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 使用 proxy 实例</span>
      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://jsonplaceholder.typicode.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token function-variable function">configure</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">proxy<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// proxy 是 &#39;http-proxy&#39; 的实例</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// Proxying websockets or socket.io</span>
      <span class="token string-property property">&#39;/socket.io&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;ws://localhost:3000&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-base" tabindex="-1"><a class="header-anchor" href="#_8-base" aria-hidden="true">#</a> 8. base</h2><p>开发或生产环境服务的公共基础路径。可以是以下几种值：</p><ol><li>绝对 URL 路径，例如 /foo/</li><li>完整的 URL，例如 https://foo.com/</li><li>空字符串或 ./（用于嵌入形式的开发）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;/foo/&#39;</span> <span class="token comment">// 开发或生产环境服务的公共基础路径</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-build-outdir" tabindex="-1"><a class="header-anchor" href="#_9-build-outdir" aria-hidden="true">#</a> 9. build.outdir</h2><p>指定打包文件的输出目录。默认值为 dist ，当 dist 被占用或公司有统一命名规范时，可进行调整。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">outDir</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span> <span class="token comment">// 打包文件的输出目录</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-build-assetsdir" tabindex="-1"><a class="header-anchor" href="#_10-build-assetsdir" aria-hidden="true">#</a> 10. build.assetsDir</h2><p>指定打包后生成静态资源的存放目录。默认值为 assets ，可根据需要进行调整。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">assetsDir</span><span class="token operator">:</span> <span class="token string">&#39;static&#39;</span> <span class="token comment">// 静态资源的存放目录</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-build-assetsinlinelimit" tabindex="-1"><a class="header-anchor" href="#_11-build-assetsinlinelimit" aria-hidden="true">#</a> 11. build.assetsInlineLimit</h2><p>图片转 base64 编码的阈值。为防止过多的 http 请求，Vite 会将小于此阈值的图片转为 base64 格式，可根据实际需求进行调整。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">assetsInlineLimit</span><span class="token operator">:</span> <span class="token number">4096</span> <span class="token comment">// 图片转 base64 编码的阈值</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用场景和优势</strong></p><ol><li><p><strong>优化加载速度：</strong> 对于一些较小的图片或文件，将它们转为 base64 编码并嵌入到 HTML 中可以减少 HTTP 请求，从而加快页面加载速度。尤其在移动端或网络状况较差的环境下，这种优化可以带来更好的用户体验。</p></li><li><p><strong>减轻服务器压力：</strong> 对于一些静态资源，使用 base64 编码可以避免需要服务器进行额外的文件传输，减轻了服务器的压力。</p></li><li><p><strong>提高可维护性：</strong> 将资源文件嵌入到 HTML 中可以避免因为资源文件丢失或移动导致的问题，提高了应用程序的可维护性。</p></li></ol><p>总之，<strong>build.assetsInlineLimit</strong> 是 Vite 中一个重要的配置选项，它可以优化加载速度、减轻服务器压力并提高可维护性。根据实际需求，你可以适当调整这个阈值来达到最佳的性能优化效果。</p><h2 id="_12-plugins" tabindex="-1"><a class="header-anchor" href="#_12-plugins" aria-hidden="true">#</a> 12. plugins</h2>`,62),u={href:"https://github.com/vbenjs/vite-plugin-mock",target:"_blank",rel:"noopener noreferrer"},d=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i mockjs <span class="token operator">-</span><span class="token constant">S</span>
npm i vite<span class="token operator">-</span>plugin<span class="token operator">-</span>mock <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>
<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> viteMockServe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-mock&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">viteMockServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),k={href:"https://github.com/vitejs/awesome-vite#plugins",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[s("插件相信大家都不陌生了。我们可以使用官方插件，也可以社区插件。如使用 @vitejs/plugin-vue 提供 Vue3 单文件组件的支持，使用 "),n("a",u,[s("vite-plugin-mock"),e(a)]),s(" 让我们更轻松地 mock 数据。")]),d,n("p",null,[n("strong",null,[s("更多社区插件，大家可以查看 "),n("a",k,[s("awesome-vite"),e(a)]),s(" 。当然如果有特殊需求，我们也可以自己写一个插件。")])])])}const f=t(c,[["render",v],["__file","vitechangyongshezhi.html.vue"]]);export{f as default};
