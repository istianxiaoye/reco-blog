import{_ as o,r as l,o as p,c,a as n,b as s,d as a,e as t}from"./app-jmEemqZF.js";const i={},r=t('<h1 id="构建工具" tabindex="-1"><a class="header-anchor" href="#构建工具" aria-hidden="true">#</a> 构建工具</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><ul><li>当我们习惯了在node中编写代码的方式后，在回到前端编写html、css、js这些东西会感觉到各种的不便。比如：不能放心的使用<u>模块化</u>规范（浏览器兼容性问题）、即使可以使用模块化规范也会面临模块过多时的加载问题。</li><li>我们就迫切的希望有一款工具可以对代码进行打包，将多个模块打包成一个文件。这样一来即解决了兼容性问题，又解决了模块过多的问题。</li><li>构建工具就起到这样一个作用，通过构建工具可以将使用ESM规范编写的代码转换为旧的JS语法，这样可以使得所有的浏览器都可以支持代码。</li></ul><h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> Webpack</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3>',5),d=n("strong",null,"webpack",-1),u=n("em",null,"静态模块打包工具",-1),k={href:"https://www.webpackjs.com/concepts/dependency-graph/",target:"_blank",rel:"noopener noreferrer"},h=n("em",null,"bundles",-1),b=t(`<blockquote><p>webpack在node中运行</p></blockquote><h3 id="使用步骤" tabindex="-1"><a class="header-anchor" href="#使用步骤" aria-hidden="true">#</a> 使用步骤</h3><ol><li>初始化项目<code>yarn init -y</code></li><li>安装依赖<code>webpack</code>、<code>webpack-cli</code></li><li>在项目中创建<code>src</code>目录，然后编写代码（默认主文件index.js）</li><li>执行<code>yarn webpack</code>来对代码进行打包（打包后观察dist目录）</li></ol><blockquote><p><code>cli</code>: command line interface 命令行工具</p><p>安装依赖<code>yarn add -D webpack webpack-cli</code>, -d表示设置为开发依赖</p><p>src 目录下的是遵循前端开发规范的，src 以外的要用node规范CommonJS</p></blockquote><h3 id="配置文件-webpack-config-js" tabindex="-1"><a class="header-anchor" href="#配置文件-webpack-config-js" aria-hidden="true">#</a> 配置文件（webpack.config.js）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>书写对象的时候，可以在最后一个属性值后面加上<code>,</code>并且属性名可以不为字符串</p><p>但在写JSON的时候，属性名也需要加上<code>“”</code>并且最后不能加上<code>,</code></p></blockquote>`,7),v={id:"mode",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#mode","aria-hidden":"true"},"#",-1),g={href:"https://www.webpackjs.com/configuration/mode/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"告知 webpack 使用相应模式的内置优化",-1),f=n("ul",null,[n("li",null,"none：不使用任何默认优化选项"),n("li",null,"production：生产模式"),n("li",null,"development：开发模式")],-1),y={id:"entry",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#entry","aria-hidden":"true"},"#",-1),x={href:"https://www.webpackjs.com/concepts/entry-points/",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,[s("默认值是 "),n("code",null,"./src/index.js"),s("（一般不改，约定优于配置）")],-1),q=n("ul",null,[n("li",null,[s("单个入口语法【最常见】 "),n("code",null,"entry: string | [string]")]),n("li",null,[s("多个传数组 "),n("code",null,"entry: ['./src/file_1.js', './src/file_2.js']")]),n("li",null,[s("对象写法分别命名打包 "),n("code",null,"entry: {app: './src/app.js',adminApp: './src/adminApp.js',},")])],-1),S={id:"output",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#output","aria-hidden":"true"},"#",-1),E={href:"https://www.webpackjs.com/concepts/output/",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,[s("默认值是 "),n("code",null,"./dist/main.js"),s("，其他生成文件默认放置在 "),n("code",null,"./dist"),s(" 文件夹中")],-1),L=n("p",null,[n("code",null,'filename: "bundle.js"'),s(" 设置打包后的文件名")],-1),D=n("p",null,[s("多个入口 entry 的情况 "),n("code",null,"filename: [name]-[id]-[hash].js")],-1),M={href:"https://www.webpackjs.com/configuration/output/#template-strings",target:"_blank",rel:"noopener noreferrer"},J=t(`<li><p><code>clean: true</code> 自动清理<u>打包目录</u>（path指定的目录），只保留当前这次打包的文件</p></li><li><p><code>path: &quot;&quot;</code> 指定打包目录，必须要绝对路径</p><blockquote><p>一般会使用Node.js中的path模块来操作文件路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//引入path模块</span>
path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span>	<span class="token comment">//表示当前目录下的dist文件夹</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li>`,2),$={id:"loader",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#loader","aria-hidden":"true"},"#",-1),P={href:"https://www.webpackjs.com/concepts/loaders/",target:"_blank",rel:"noopener noreferrer"},W=n("strong",null,"loader",-1),B=n("u",null,"其他类型",-1),H={href:"https://www.webpackjs.com/concepts/modules",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"使用步骤：",-1),T=n("li",null,[n("p",null,[s("安装对应的 loader："),n("code",null,"yarn add css-loader style-loader ts-loader -D")])],-1),A=n("p",null,"配置方式（推荐）：",-1),O=n("li",null,[s("test 属性：识别出哪些文件需要被转换（使用正则表达式"),n("code",null,"/\\.css$/i"),s("）")],-1),Y=n("li",null,"use 属性：定义出在进行转换时，使用哪个 loader（字符串、数组、对象）",-1),z={href:"https://www.webpackjs.com/guides/asset-management/#loading-images",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,'"asset/resource"',-1),G=n("li",null,"exclude 属性：不需要转换的文件夹（正则表达式）",-1),K=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>	<span class="token comment">// 易漏点</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span> 
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(jpg|png|gif)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&quot;asset/resource&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>css-loader 只负责打包，style-loader 负责渲染生效【单一职责原则】</p><p>loader 执行顺序为<strong>从后向前</strong>执行，因此 use 的数组顺序不能调换</p></blockquote>`,2),Q=t(`<li><p>*内联方式：在每个 <code>import</code> 语句中显式指定 loader。</p><p>使用 <code>!</code> 将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Styles <span class="token keyword">from</span> <span class="token string">&#39;style-loader!css-loader?modules!./styles.css&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用<code>!</code>前缀，将禁用所有已配置的 normal loader(普通 loader)</li><li>使用<code>!!</code>前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）</li><li>使用<code>-!</code>前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders</li></ul><p>选项可以传递查询参数，例如 <code>?key=value&amp;foo=bar</code>，或者一个 JSON 对象，例如 <code>?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}</code>。</p><blockquote><p>尽可能使用 <code>module.rules</code>，因为这样可以减少源码中样板文件的代码量，并且可以在出错时，更快地调试和定位 loader 中的问题。</p></blockquote></li>`,1),R={id:"babel",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#babel","aria-hidden":"true"},"#",-1),X={href:"https://www.webpackjs.com/loaders/babel-loader",target:"_blank",rel:"noopener noreferrer"},Z=t(`<h6 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h6><ul><li><p>在编写js代码时，经常需要使用一些js中的新特性，而新特性在旧的浏览器中兼容性并不好。此时就导致我们无法使用一些新的特性。</p></li><li><p>但是我们现在希望能够使用新的特性，我们可以采用折中的方案。依然使用新特性编写代码，但是代码编写完成时我们可以通过一些工具将新代码转换为旧代码。</p></li><li><p>babel就是这样一个工具，可以将新的js语法转换为旧的js，以提高代码的兼容性。</p></li><li><p>如果希望在webpack支持babel，则需要向webpack中引入babel的loader</p><blockquote><p>是 loader 中的一种</p></blockquote></li></ul><h6 id="使用步骤-1" tabindex="-1"><a class="header-anchor" href="#使用步骤-1" aria-hidden="true">#</a> 使用步骤</h6><ol><li><p>安装 <code>npm install -D babel-loader @babel/core @babel/preset-env</code></p><ul><li>babel-loader：连接webpack和babel的中间件</li><li>@babel/core：babel的转换核心</li><li>@babel/preset-env：预设环境</li></ul></li><li><p>配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在package.json中设置兼容列表</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;defaults&quot;</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置参考：https://github.com/browserslist/browserslist</p></li></ol>`,4),nn={id:"plugin",tabindex:"-1"},sn=n("a",{class:"header-anchor",href:"#plugin","aria-hidden":"true"},"#",-1),en={href:"https://www.webpackjs.com/concepts/plugins/",target:"_blank",rel:"noopener noreferrer"},an=n("h5",{id:"概念-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概念-2","aria-hidden":"true"},"#"),s(" 概念")],-1),tn=n("li",null,"插件用来为webpack来扩展功能",-1),on={href:"https://www.webpackjs.com/concepts/loaders",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://www.webpackjs.com/plugins/",target:"_blank",rel:"noopener noreferrer"},pn=t(`<h5 id="常用插件" tabindex="-1"><a class="header-anchor" href="#常用插件" aria-hidden="true">#</a> 常用插件</h5><p>html-webpack-plugin</p><ul><li>这个插件可以在打包代码后，自动在打包目录生成html页面</li></ul><p>使用步骤：</p><ol><li>安装依赖<code>yarn add -D html-webpack-plugin</code></li><li>引入依赖<code>const HTMLPlugin = require(&quot;html-webpack-plugin&quot;)</code></li><li>配置插件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token keyword">new</span> <span class="token class-name">HTMLPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token comment">// title: &quot;Hello Webpack&quot;,	//设置title</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.html&quot;</span>	<span class="token comment">//模板，自动引入script脚本</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),cn={id:"devtool",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#devtool","aria-hidden":"true"},"#",-1),dn={href:"https://www.webpackjs.com/configuration/devtool/#root",target:"_blank",rel:"noopener noreferrer"},un=t('<p><code>devtool:&quot;inline-source-map&quot;</code>配置源码的映射，方便调试打包后的代码。</p><h3 id="开发服务器-webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#开发服务器-webpack-dev-server" aria-hidden="true">#</a> 开发服务器（webpack-dev-server）</h3><ul><li>安装：<code>yarn add -D webpack-dev-server</code></li><li>启动：<code>yarn webpack serve --open</code>（<code>--open</code>表示启动服务器后自动打开）</li></ul><blockquote><p>配置 <code>webpack –watch</code> 执行，（在本地文件夹中访问）代码发生变化时自动更新打包。</p></blockquote><h3 id="grunt-glup的对比" tabindex="-1"><a class="header-anchor" href="#grunt-glup的对比" aria-hidden="true">#</a> grunt/glup的对比</h3>',5),kn={id:"vite",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#vite","aria-hidden":"true"},"#",-1),bn={href:"https://cn.vitejs.dev/",target:"_blank",rel:"noopener noreferrer"},vn=n("h3",{id:"概念-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概念-3","aria-hidden":"true"},"#"),s(" 概念")],-1),mn=n("li",null,[n("p",null,"Vite也是前端的构建工具")],-1),gn=n("li",null,[n("p",null,"相较于webpack，Vite采用了不同的运行方式："),n("ul",null,[n("li",null,"开发时，并不对代码打包，而是直接采用**ESM（ES模块）**的方式来运行项目"),n("li",null,"在项目部署时，再对项目进行打包")])],-1),_n={href:"https://cn.vitejs.dev/guide/why.html#slow-server-start",target:"_blank",rel:"noopener noreferrer"},fn=n("li",null,[n("p",null,"本质上 Vite 和 Webpack 是打包工具，只是 Webpack 比较底层，需要自己手动去配置。"),n("blockquote",null,[n("p",null,"ESM 必须通过 url 加载页面（即需要通过服务器运行）")])],-1),yn=n("h3",{id:"基本使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基本使用","aria-hidden":"true"},"#"),s(" 基本使用")],-1),wn=n("li",null,[n("p",null,[s("安装开发依赖 Vite "),n("code",null,"yarn add -D vite")])],-1),xn={href:"https://cn.vitejs.dev/guide/#index-html-and-project-root",target:"_blank",rel:"noopener noreferrer"},jn=n("ul",null,[n("li",null,[s("在页面中引入 js 文件的时候要指定 "),n("code",null,"type=“module”")]),n("li",null,"修改路径直接在 script 标签中修改 src 属性正确即可（webpack需要配置）")],-1),qn=t("<li><p>开发命令：</p><ul><li><p><code>vite</code> 启动<strong>开发</strong>服务器</p></li><li><p><code>vite build</code> 打包代码</p></li><li><p><code>vite preview</code> <strong>预览</strong>打包后代码</p></li></ul></li>",1),Sn={href:"https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project",target:"_blank",rel:"noopener noreferrer"},Vn=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vite@latest	<span class="token comment">#使用 NPM</span>
<span class="token function">yarn</span> create vite	<span class="token comment">#使用 Yarn</span>
<span class="token function">pnpm</span> create vite	<span class="token comment">#使用 PNPM</span>
<span class="token comment">#Vanilla 表示原生JS开发项目</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),En={start:"5"},Nn={href:"https://cn.vitejs.dev/guide/using-plugins.html",target:"_blank",rel:"noopener noreferrer"},Ln=t(`<ol><li><p>安装插件：<code>npm add -D @vitejs/plugin-legacy</code></p><blockquote><p><code>@vitejs/plugin-legacy</code>：兼容传统浏览器的语法转换插件</p></blockquote></li><li><p>配置文件：<code>vite.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
<span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-legacy&#39;</span>	<span class="token comment">//引入插件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>	<span class="token comment">//语法提示（可选）</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>	<span class="token comment">//写上defineConfig配置时会有提示</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>	<span class="token comment">//配置插件</span>
    <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;defaults&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IE 11&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">//配置兼容版本</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>需要使用ES6的模块化（<code>export default</code>）去暴露文件（区别于 webpack 使用<code>require</code>）</p></blockquote></li></ol>`,1);function Dn(Mn,Jn){const e=l("ExternalLinkIcon");return p(),c("div",null,[r,n("p",null,[s("本质上，"),d,s(" 是一个用于现代 JavaScript 应用程序的 "),u,s("。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个"),n("a",k,[s("依赖图(dependency graph)"),a(e)]),s("，然后将你项目中所需的每一个模块组合成一个或多个 "),h,s("，它们均为静态资源，用于展示你的内容。【按需打包】")]),b,n("h4",v,[m,s(),n("a",g,[s("mode"),a(e)])]),_,f,n("h4",y,[w,s(),n("a",x,[s("entry"),a(e)])]),j,q,n("h4",S,[V,s(),n("a",E,[s("output"),a(e)])]),N,n("ul",null,[n("li",null,[L,n("blockquote",null,[D,n("p",null,[s("使用 "),n("a",M,[s("占位符(substitutions)"),a(e)]),s(" 来确保每个文件具有唯一的名称（很少用）")])])]),J]),n("h4",$,[C,s(),n("a",P,[s("loader"),a(e)])]),n("p",null,[W,s(" 让 webpack 能够去处理"),B,s("的文件（默认只能处理js文件），并将它们转换为有效 "),n("a",H,[s("模块"),a(e)]),s("，以供应用程序使用，以及被添加到依赖图中。")]),I,n("ol",null,[T,n("li",null,[A,n("ul",null,[O,Y,n("li",null,[s("type 属性："),n("a",z,[s("加载图像资源"),a(e)]),s("，设置为"),F]),G]),K]),Q]),n("h5",R,[U,s(),n("a",X,[s("babel"),a(e)])]),Z,n("h4",nn,[sn,s(),n("a",en,[s("plugin"),a(e)])]),an,n("ul",null,[tn,n("li",null,[s("插件目的在于解决 "),n("a",on,[s("loader"),a(e)]),s(" 无法实现的其他事。")]),n("li",null,[s("Webpack 提供很多开箱即用的 "),n("a",ln,[s("插件"),a(e)]),s("。")])]),pn,n("h4",cn,[rn,s(),n("a",dn,[s("devtool"),a(e)])]),un,n("h2",kn,[hn,s(),n("a",bn,[s("Vite"),a(e)])]),vn,n("ul",null,[mn,gn,n("li",null,[n("p",null,[s("除了"),n("a",_n,[s("速度外"),a(e)]),s("，Vite使用起来也更加方便（开箱即用，都配置好了）")])]),fn]),yn,n("ol",null,[wn,n("li",null,[n("p",null,[s("Vite 的源码目录默认就是项目**"),n("a",xn,[s("根目录"),a(e)]),s("**")]),jn]),qn,n("li",null,[n("p",null,[n("a",Sn,[s("使用命令构建项目"),a(e)]),s("：")])])]),Vn,n("ol",En,[n("li",null,[n("p",null,[n("a",Nn,[s("使用插件"),a(e)])]),Ln])])])}const Cn=o(i,[["render",Dn],["__file","webpackhevitexuexi.html.vue"]]);export{Cn as default};
