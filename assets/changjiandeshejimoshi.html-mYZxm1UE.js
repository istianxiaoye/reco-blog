import{_ as t,o as e,c as i,e as l}from"./app-jmEemqZF.js";const r={},a=l("<p>常见的设计模式包括但不限于以下几种：</p><ol><li>单例模式（Singleton Pattern）：确保一个类只有一个实例，并提供全局访问点。</li><li>工厂模式（Factory Pattern）：通过一个工厂类来创建对象，隐藏对象的创建细节。</li><li>观察者模式（Observer Pattern）：定义了一种一对多的依赖关系，当一个对象的状态发生改变时，其依赖者将收到通知。</li><li>适配器模式（Adapter Pattern）：将一个类的接口转换成客户端所期望的接口。</li><li>策略模式（Strategy Pattern）：定义一系列的算法，将它们封装起来，并使它们可以相互替换。</li><li>装饰者模式（Decorator Pattern）：动态地给对象添加额外的职责，是继承的一种替代方案。</li><li>MVC模式（Model-View-Controller Pattern）：将应用程序分为模型、视图和控制器三个部分，实现关注点分离。</li><li>迭代器模式（Iterator Pattern）：提供一种顺序访问聚合对象中各个元素的方法，而无需暴露其内部表示。</li></ol><p>以上只是一些常见的设计模式，每种模式都有其独特的应用场景和解决特定问题的方式。</p>",3),n=[a];function o(c,s){return e(),i("div",null,n)}const d=t(r,[["render",o],["__file","changjiandeshejimoshi.html.vue"]]);export{d as default};
